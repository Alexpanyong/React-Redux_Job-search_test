{"version":3,"sources":["assets/images/Logo.svg","shared/components/Header/index.jsx","shared/components/Header/Header.jsx","components/JobCard/JobCard.jsx","App.js","store/actions.js","constants/constant.js","store/types.js","serviceWorker.js","store/reducer.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","src","Logo","width","alt","JobCard","_this$props","this","props","job_title","salaryRangeFrom","salaryRangeFilter","salaryRangeTo","getShortForm","job_location","xp_lvl","degree","job_type","company_logo","company_name","concat","id","Component","App","val","parseInt","handleInputChange","e","_this","target","value","handleClickFilterResult","jobs","arguments","length","undefined","filteredJobs","filter","job","includes","fetchApiData","_this2","_ref","apiData","data","total_num","inputValue","jobsToDisplay","searchedJobs","jobList","map","JobCard_JobCard_JobCard","key","salary_range_filters","Object","keys","salary_range_from","salary_range_to","components_Header","onChange","onClick","mapDispatchToProps","dispatch","fetch","then","response","json","type","catch","console","log","connect","state","Boolean","window","location","hostname","match","initialState","reducer","action","newState","objectSpread","middleware","thunk","store","createStore","compose","applyMiddleware","apply","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2e8cac6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Logo.60fc04ce.svg\";","import Header from './Header'\n\nexport default Header","import React from 'react'\n\nimport Logo from '../../../assets/images/Logo.svg'\nimport './Header.css'\n\nconst Header = () => (\n  <header className=\"Header\">\n    <img src={Logo} width=\"120\" alt=\"Bossjob\" />\n  </header>\n)\n\nexport default Header","import React, { Component } from 'react';\nimport './JobCard.css';\n\nexport default class JobCard extends Component {\n\n    \n\n    render() {\n        const { job_title, \n                salaryRangeFilter, \n                salaryRangeFrom, \n                salaryRangeTo, \n                getShortForm,\n                job_location,\n                xp_lvl,\n                degree,\n                job_type,\n                company_logo,\n                company_name\n                } = this.props;\n        return (\n        <div className=\"jobCard\">\n                <div className=\"jobTitle\">{job_title}</div>\n                <div className=\"salaryRange\">{`${getShortForm(salaryRangeFrom)} - ${getShortForm(salaryRangeTo)}`}</div>\n            <div className=\"clearFix\"></div>\n            <div className=\"jobDetails\">\n                <div id=\"location\">\n                    <div>\n                    <span className=\"icon\"></span>\n                    <span className=\"text\">{job_location}</span>\n                    </div>\n                </div>\n                <div id=\"xpLvl\">\n                    <div>\n                    <span className=\"icon\"></span>\n                    <span className=\"text\">{xp_lvl}</span>\n                    </div>\n                </div>\n                <div id=\"degree\">\n                    <div>\n                    <span className=\"icon\"></span>\n                    <span className=\"text\">{degree}</span>\n                    </div>\n                </div>\n                <div id=\"type\">\n                    <div>\n                    <span className=\"icon\"></span>\n                    <span className=\"text\">{job_type}</span>\n                    </div>\n                </div>\n            </div>\n            <div className=\"clearFix\"></div>\n            <div className=\"company\">\n                <div>\n                    <div className=\"logo\"><img src={company_logo} alt=\"company logo\"/></div>\n                    <div className=\"name\">{company_name}</div>\n                </div>\n            </div>\n            <div className=\"time\">3 hours ago</div>\n        </div>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './shared/components/Header';\nimport JobCard from './components/JobCard/JobCard';\nimport { connect } from 'react-redux';\nimport { fetchApiData, handleInputChange, handleClickFilterResult } from './store/actions';\n\nclass App extends Component {\n\n  componentWillMount() {\n    this.props.fetchApiData();\n  }\n\n  getShortForm = val => (parseInt(val) / 1000 + 'k');\n\n  handleInputChange = e => {\n    this.props.handleInputChange(e.target.value);\n  };\n\n  handleClickFilterResult = (jobs = [], value) => {\n    if (value) {\n      const filteredJobs = jobs ? jobs.filter(job => job.company_name.includes(value) || job.job_title.includes(value)) : [];\n      this.props.handleClickFilterResult(filteredJobs);\n    }\n  };\n\n  render() {\n    const { jobs, total_num } = this.props.apiData.data || [];\n    const { inputValue, jobsToDisplay } = this.props;\n    const searchedJobs = jobsToDisplay ? jobsToDisplay : jobs;\n    const jobList = searchedJobs.map(job => <JobCard\n      key={job.id}\n      job_title={job.job_title}\n      salaryRangeFilter={job.salary_range_filters[0][Object.keys(job.salary_range_filters[0])[0]]}\n      salaryRangeFrom={job.salary_range_from}\n      salaryRangeTo={job.salary_range_to}\n      getShortForm={this.getShortForm}\n      job_location={job.job_location}\n      xp_lvl={job.xp_lvl}\n      degree={job.degree}\n      job_type={job.job_type}\n      company_logo={job.company_logo}\n      company_name={job.company_name}\n    />);\n\n    return (\n      <div className=\"App\">\n        <div className=\"App-Wrapper\">\n          <Header />\n          <div className=\"searchBox\">\n            <span>Search for job title or company name</span>\n            <div className=\"inputBox\">\n              <input id=\"inputText\" onChange={this.handleInputChange}></input>\n            </div>\n            <button className=\"searchBtn\" onClick={() => this.handleClickFilterResult(jobs, inputValue)}>Filter results</button>\n          </div>\n          <div className=\"jobsWrapper\">\n            {jobsToDisplay.length !== 0 && <div className=\"numberOfJobs\">{searchedJobs ? searchedJobs.length : total_num} jobs found</div>}\n            {searchedJobs && jobList }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    apiData: state.apiData,\n    inputValue: state.inputValue,\n    jobsToDisplay: state.jobsToDisplay\n  }\n}\n\nconst mapDispatchToProps = {\n  fetchApiData,\n  handleInputChange,\n  handleClickFilterResult\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { API_ENDPOINT } from '../constants/constant';\nimport { FETCH_APIDATA, HANDLE_INPUT_CHANGE, HANDLE_CLICK_FILTER_RESULT } from './types';\n\nexport const fetchApiData = () => (dispatch) => {\n    fetch(API_ENDPOINT)\n        .then(response => response.json())\n        .then(json => {\n            dispatch({\n                type: FETCH_APIDATA,\n                apiData: json\n            });\n            // console.log(\"Jobs fetched:\", json.data.jobs);\n        })\n        .catch(\n            () => {\n                console.log(\"Fetch data failed\");\n            }\n        )\n};\n\nexport const handleInputChange = (val) => (dispatch) => {\n    dispatch({\n        type: HANDLE_INPUT_CHANGE,\n        value: val\n    });\n};\n\nexport const handleClickFilterResult = (val) => (dispatch) => {\n    dispatch({\n        type: HANDLE_CLICK_FILTER_RESULT,\n        value: val\n    });\n};","export const API_ENDPOINT = \"https://search.bossjob.com/api/v1/search/job_filter?size=10&query=system\";","export const FETCH_APIDATA = 'FETCH_APIDATA';\nexport const HANDLE_INPUT_CHANGE = 'HANDLE_INPUT_CHANGE';\nexport const HANDLE_CLICK_FILTER_RESULT = 'HANDLE_CLICK_FILTER_RESULT';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\n    apiData: {},\n    inputValue: \"\",\n    jobsToDisplay: []\n};\n\nconst reducer = (state = initialState, action) => {\n    const newState = {...state};\n\n    switch (action.type) {\n        case \"FETCH_APIDATA\":\n            newState.apiData = action.apiData;\n            break;\n        case \"HANDLE_INPUT_CHANGE\":\n            newState.inputValue = action.value;\n            newState.jobsToDisplay = [];\n            break;\n        case \"HANDLE_CLICK_FILTER_RESULT\":\n            newState.jobsToDisplay = action.value;\n            break;\n        default:\n            break;\n    }\n\n    return newState;\n};\n\nexport default reducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, compose } from 'redux';\nimport reducer from './store/reducer';\nimport thunk from 'redux-thunk';\n\nconst middleware = [thunk];\nconst store = createStore(reducer, compose(applyMiddleware(...middleware)));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}